#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// vec3 with a scaled z axis so we can use atomicMax
struct PointScale {
    float x;
    float y;
    int z;
};

struct Triangle {
    float p1x;
    float p1y;
    float p1z;
    float p2x;
    float p2y;
    float p2z;
    float p3x;
    float p3y;
    float p3z;
};

layout(std430, set = 0, binding = 0) readonly buffer Triangles {
    Triangle tri[];
} tris;

layout(std430, set = 0, binding = 1) buffer Points {
    PointScale point[];
} points;

bool ray_tri_intersect(in vec3 origin, in vec3 p1, in vec3 p2, in vec3 p3, out int hit) {
    // watertight ray/tri intersect from http://jcgt.org/published/0002/01/05/paper.pdf
    // modified to hard code ray direction
    vec3 A = p1 - origin;
    vec3 B = p2 - origin;
    vec3 C = p3 - origin;
    float Ax = A[0] * A[2];
    float Ay = A[1] * A[2];
    float Bx = B[0] * B[2];
    float By = B[1] * B[2];
    float Cx = C[0] * C[2];
    float Cy = C[1] * C[2];
    float U = Cx * By - Cy * Bx;
    float V = Ax * Cy - Ay * Cx;
    float W = Bx * Ay - By * Ax;

    if ((U < 0 || V < 0 || W < 0) && (U > 0 || V > 0 || W > 0)) {
        return false;
    }

    float det = U + V + W;
    if (det == 0) {
        return false;
    }

    float T = U * A[2] + V * B[2] + W * C[2];
    float rcpDet = 1.0 / det;
    hit = int((origin[2] + (T * rcpDet)) * 1000000);
    return true;
}

void main() {
    // idx is triangle array index
    uint idx = gl_GlobalInvocationID.x;
    // idy is point array index
    uint idy = gl_GlobalInvocationID.y;
    if(idx < tris.tri.length() && idy < points.point.length()) {
        int hit = 0;
        // convert from floats to vecs
        vec3 origin = vec3(points.point[idy].x, points.point[idy].y, float(points.point[idy].z) / 1000000);
        vec3 p1 = vec3(tris.tri[idx].p1x, tris.tri[idx].p1y, tris.tri[idx].p1z);
        vec3 p2 = vec3(tris.tri[idx].p2x, tris.tri[idx].p2y, tris.tri[idx].p2z);
        vec3 p3 = vec3(tris.tri[idx].p3x, tris.tri[idx].p3y, tris.tri[idx].p3z);
        // check if the current point intersects with the current triangle
        bool intersection = ray_tri_intersect(origin, p1, p2, p3, hit);
        // if Z is higher write it as the current Z
        if (intersection) {
            atomicMax(points.point[idy].z, hit);
        }
    }
}